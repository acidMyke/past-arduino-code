#include <avr/pgmspace.h>

int x[] = {13, 12, 11};
int y[] = {9, 8, 7, 6, 5, 4, 3, 2};
int xEn = 10;

PROGMEM const unsigned char CH[] = {  // Data store as no of column (max 5), no of row, column data 1, column data 2, column data 3, column data 4, column data 5
  3, 8, B00000000, B00000000, B00000000, B00000000, B00000000, // space
  1, 8, B01011111, B00000000, B00000000, B00000000, B00000000, // !
  3, 8, B00000011, B00000000, B00000011, B00000000, B00000000, // "
  5, 8, B00010100, B00111110, B00010100, B00111110, B00010100, // #
  4, 8, B00100100, B01101010, B00101011, B00010010, B00000000, // $
  5, 8, B01100011, B00010011, B00001000, B01100100, B01100011, // %
  5, 8, B00110110, B01001001, B01010110, B00100000, B01010000, // &
  1, 8, B00000011, B00000000, B00000000, B00000000, B00000000, // '
  3, 8, B00011100, B00100010, B01000001, B00000000, B00000000, // (
  3, 8, B01000001, B00100010, B00011100, B00000000, B00000000, // )
  5, 8, B00101000, B00011000, B00001110, B00011000, B00101000, // *
  5, 8, B00001000, B00001000, B00111110, B00001000, B00001000, // +
  2, 8, B10110000, B01110000, B00000000, B00000000, B00000000, // ,
  4, 8, B00001000, B00001000, B00001000, B00001000, B00000000, // -
  2, 8, B01100000, B01100000, B00000000, B00000000, B00000000, // .
  4, 8, B01100000, B00011000, B00000110, B00000001, B00000000, // /
  4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // 0
  3, 8, B01000010, B01111111, B01000000, B00000000, B00000000, // 1
  4, 8, B01100010, B01010001, B01001001, B01000110, B00000000, // 2
  4, 8, B00100010, B01000001, B01001001, B00110110, B00000000, // 3
  4, 8, B00011000, B00010100, B00010010, B01111111, B00000000, // 4
  4, 8, B00100111, B01000101, B01000101, B00111001, B00000000, // 5
  4, 8, B00111110, B01001001, B01001001, B00110000, B00000000, // 6
  4, 8, B01100001, B00010001, B00001001, B00000111, B00000000, // 7
  4, 8, B00110110, B01001001, B01001001, B00110110, B00000000, // 8
  4, 8, B00000110, B01001001, B01001001, B00111110, B00000000, // 9
  2, 8, B01010000, B00000000, B00000000, B00000000, B00000000, // :
  2, 8, B10000000, B01010000, B00000000, B00000000, B00000000, // ;
  3, 8, B00010000, B00101000, B01000100, B00000000, B00000000, // <
  3, 8, B00010100, B00010100, B00010100, B00000000, B00000000, // =
  3, 8, B01000100, B00101000, B00010000, B00000000, B00000000, // >
  4, 8, B00000010, B01011001, B00001001, B00000110, B00000000, // ?
  5, 8, B00111110, B01001001, B01010101, B01011101, B00001110, // @
  4, 8, B01111110, B00010001, B00010001, B01111110, B00000000, // A
  4, 8, B01111111, B01001001, B01001001, B00110110, B00000000, // B
  4, 8, B00111110, B01000001, B01000001, B00100010, B00000000, // C
  4, 8, B01111111, B01000001, B01000001, B00111110, B00000000, // D
  4, 8, B01111111, B01001001, B01001001, B01000001, B00000000, // E
  4, 8, B01111111, B00001001, B00001001, B00000001, B00000000, // F
  4, 8, B00111110, B01000001, B01001001, B01111010, B00000000, // G
  4, 8, B01111111, B00001000, B00001000, B01111111, B00000000, // H
  3, 8, B01000001, B01111111, B01000001, B00000000, B00000000, // I
  4, 8, B00110000, B01000000, B01000001, B00111111, B00000000, // J
  4, 8, B01111111, B00001000, B00010100, B01100011, B00000000, // K
  4, 8, B01111111, B01000000, B01000000, B01000000, B00000000, // L
  5, 8, B01111111, B00000010, B00001100, B00000010, B01111111, // M
  5, 8, B01111111, B00000100, B00001000, B00010000, B01111111, // N
  4, 8, B00111110, B01000001, B01000001, B00111110, B00000000, // O
  4, 8, B01111111, B00001001, B00001001, B00000110, B00000000, // P
  4, 8, B00111110, B01000001, B01000001, B10111110, B00000000, // Q
  4, 8, B01111111, B00001001, B00001001, B01110110, B00000000, // R
  4, 8, B01000110, B01001001, B01001001, B00110010, B00000000, // S
  5, 8, B00000001, B00000001, B01111111, B00000001, B00000001, // T
  4, 8, B00111111, B01000000, B01000000, B00111111, B00000000, // U
  5, 8, B00001111, B00110000, B01000000, B00110000, B00001111, // V
  5, 8, B00111111, B01000000, B00111000, B01000000, B00111111, // W
  5, 8, B01100011, B00010100, B00001000, B00010100, B01100011, // X
  5, 8, B00000111, B00001000, B01110000, B00001000, B00000111, // Y
  4, 8, B01100001, B01010001, B01001001, B01000111, B00000000, // Z
  2, 8, B01111111, B01000001, B00000000, B00000000, B00000000, // [
  4, 8, B00000001, B00000110, B00011000, B01100000, B00000000, // \ backslash
  2, 8, B01000001, B01111111, B00000000, B00000000, B00000000, // ]
  3, 8, B00000010, B00000001, B00000010, B00000000, B00000000, // hat
  4, 8, B01000000, B01000000, B01000000, B01000000, B00000000, // _
  2, 8, B00000001, B00000010, B00000000, B00000000, B00000000, // `
  4, 8, B00100000, B01010100, B01010100, B01111000, B00000000, // a
  4, 8, B01111111, B01000100, B01000100, B00111000, B00000000, // b
  4, 8, B00111000, B01000100, B01000100, B00101000, B00000000, // c
  4, 8, B00111000, B01000100, B01000100, B01111111, B00000000, // d
  4, 8, B00111000, B01010100, B01010100, B00011000, B00000000, // e
  3, 8, B00000100, B01111110, B00000101, B00000000, B00000000, // f
  4, 8, B10011000, B10100100, B10100100, B01111000, B00000000, // g
  4, 8, B01111111, B00000100, B00000100, B01111000, B00000000, // h
  3, 8, B01000100, B01111101, B01000000, B00000000, B00000000, // i
  4, 8, B01000000, B10000000, B10000100, B01111101, B00000000, // j
  4, 8, B01111111, B00010000, B00101000, B01000100, B00000000, // k
  3, 8, B01000001, B01111111, B01000000, B00000000, B00000000, // l
  5, 8, B01111100, B00000100, B01111100, B00000100, B01111000, // m
  4, 8, B01111100, B00000100, B00000100, B01111000, B00000000, // n
  4, 8, B00111000, B01000100, B01000100, B00111000, B00000000, // o
  4, 8, B11111100, B00100100, B00100100, B00011000, B00000000, // p
  4, 8, B00011000, B00100100, B00100100, B11111100, B00000000, // q
  4, 8, B01111100, B00001000, B00000100, B00000100, B00000000, // r
  4, 8, B01001000, B01010100, B01010100, B00100100, B00000000, // s
  3, 8, B00000100, B00111111, B01000100, B00000000, B00000000, // t
  4, 8, B00111100, B01000000, B01000000, B01111100, B00000000, // u
  5, 8, B00011100, B00100000, B01000000, B00100000, B00011100, // v
  5, 8, B00111100, B01000000, B00111100, B01000000, B00111100, // w
  5, 8, B01000100, B00101000, B00010000, B00101000, B01000100, // x
  4, 8, B10011100, B10100000, B10100000, B01111100, B00000000, // y
  3, 8, B01100100, B01010100, B01001100, B00000000, B00000000, // z
  3, 8, B00001000, B00110110, B01000001, B00000000, B00000000, // {
  1, 8, B01111111, B00000000, B00000000, B00000000, B00000000, // |
  3, 8, B01000001, B00110110, B00001000, B00000000, B00000000, // }
  4, 8, B00001000, B00000100, B00001000, B00000100, B00000000, // ~
};

byte data[8];

void shiftByte(byte b, uint64_t time = 5000);

void setup() {
  Serial.begin(115200);
  for(int i = 0; i < 8; i++) data[i] = 0xFF;
  int prevMillis = millis() + 5000;
  while (prevMillis > millis()) matrixUpdate();
  for(int i = 0; i < 8; i++) data[i] = 0x00;
  matrixUpdate();
  shiftString("Begin!!!");
}

void loop() {
  matrixUpdate();
}

void serialEvent() {
  for (int i = 0; i < 8; i++) shiftByte(0xFF, 10); // wipe the previous data
  for (int i = 0; i < 8; i++) shiftByte(0x00, 10); // wipe the previous data
  while (Serial.available()) {
    byte value = Serial.read();
    if (value >= 0x20) shiftLetter(value);
    else Serial.write(0x2E);
  }
  Serial.println();
}

void shiftString(String str) {
  for (int i = 0; i < 8; i++) shiftByte(0xFF, 10); // wipe the previous data
  for (int i = 0; i < 8; i++) shiftByte(0x00, 10); // wipe the previous data
  for (int q = 0; q < str.length(); q++) shiftLetter(str.charAt(q));
  Serial.println();
}

void shiftLetter(char ch) {
  Serial.print("\nCharater: " + String(ch));
  ch -= 32;
  int size = pgm_read_byte(CH + 7 * ch);
  Serial.print("\nBuffer Size: " + String(size, DEC));
  byte buffer[size + 1];
  for (int i = 0; i < size; i++)
    buffer[i] = pgm_read_byte(CH + 7 * ch + 2 + i);
  buffer[size] = 0x00; // very small spacing
  Serial.print("\nBuffer:");
  for (int i = 0; i < size; i++) Serial.print("\n\t" + Byte(buffer[i]));
  for (int z = 0; z <= size; z++) shiftByte(buffer[z]);
}

void shiftByte(byte b, uint64_t time) {
  for (int i = 0; i < 7; i++) data[i] = data[i + 1]; // shift the data to the right
  data[7] = b;
  printData("\nShift Bytes: ");
  int prevMillis = millis() + time;
  while (prevMillis > millis()) matrixUpdate();
}

void matrixUpdate() {
  //printData("\nPrint Bytes: ");
  for (int a = 0; a < 8; a++) {
    digitalWrite(xEn, LOW);
    for (int i = 0; i < 3; i++) digitalWrite(x[i], bitRead(a, i));
    for (int b = 0; b < 8; b++) digitalWrite(y[b], bitRead(data[a], b)); //random(0, 2) //bitRead(data[a], 7 - b)
    digitalWrite(xEn, HIGH);
    delayMicroseconds(500);
  }
}

void printData(String str) {
  Serial.print(str);
  for (int i = 0; i < 8; i++) Serial.print("\n\t" + Byte(data[i]));
}

String Byte(byte b){
  String str = String(b, BIN);
  switch (str.length()){
    case 1: str = "B0000000" + str; break;
    case 2: str = "B000000" + str; break;
    case 3: str = "B00000" + str; break;
    case 4: str = "B0000" + str; break;
    case 5: str = "B000" + str; break;
    case 6: str = "B00" + str; break;
    case 7: str = "B0" + str; break;
    case 8: str = "B" + str; break;
  }
  return str;
}

